<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>PyTorch on SymmFz's Blog</title><link>https://symmfz.github.io/tags/pytorch/</link><description>Recent content in PyTorch on SymmFz's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>Copyright © 2024-2024 SymmFz. All Rights Reserved.</copyright><lastBuildDate>Fri, 22 Mar 2024 21:05:01 +0800</lastBuildDate><atom:link href="https://symmfz.github.io/tags/pytorch/index.xml" rel="self" type="application/rss+xml"/><item><title>PyTorch</title><link>https://symmfz.github.io/blog/2024/03/pytorch/</link><pubDate>Fri, 22 Mar 2024 21:05:01 +0800</pubDate><guid>https://symmfz.github.io/blog/2024/03/pytorch/</guid><description>&lt;p>本文为 PyTorch 学习笔记，介绍了 PyTorch 项目的基本代码范式。&lt;/p></description><content:encoded><![CDATA[<p>本文为 PyTorch 学习笔记，介绍了 PyTorch 项目的基本代码范式。</p>
<h2 id="数据的导入" data-numberify>数据的导入<a class="anchor ms-1" href="#数据的导入"></a></h2>
<p>数据的导入需要用到两个 PyTorch 库，分别是 <code>torch.utils.data.Dataset</code> 和 <code>torch.utils.data.DataLoader</code></p>

<h3 id="dataset-类的使用" data-numberify>Dataset 类的使用<a class="anchor ms-1" href="#dataset-类的使用"></a></h3>
<p>可以使用 Dataset 类处理自定义的数据集，示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyDataset</span><span class="p">(</span><span class="n">Dataset</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root_dir</span><span class="p">,</span> <span class="n">label_dir</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">root_dir</span> <span class="o">=</span> <span class="n">root_dir</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">label_dir</span> <span class="o">=</span> <span class="n">label_dir</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">root_dir</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">label_dir</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">image_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="n">img_name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">image_name</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>  
</span></span><span class="line"><span class="cl">        <span class="n">img_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="n">img_name</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">          
</span></span><span class="line"><span class="cl">        <span class="n">label</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">label_dir</span>  
</span></span><span class="line"><span class="cl">        <span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">img_path</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">img</span><span class="p">,</span> <span class="n">label</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">image_name</span><span class="p">)</span>
</span></span></code></pre></div><p>自定义自己的数据类需要继承 PyTorch 的 Dataset 类。</p>

<h4 id="方法的重写" data-numberify>方法的重写<a class="anchor ms-1" href="#方法的重写"></a></h4>
<p>继承 Dataset 父类后，还需要根据数据集的具体结构和任务需求重写一些方法，其中必须重写的方法包括：<code>__init__</code> 、<code>__getitem__</code>、<code>__len__</code></p>

<h5 id="构造方法的重写" data-numberify>构造方法的重写<a class="anchor ms-1" href="#构造方法的重写"></a></h5>
<p>重写构造方法的目的是定义其他方法所需的属性，例如上文示例中的根路径、标签路径等等。</p>

<h5 id="getitem-方法的重写" data-numberify>getitem 方法的重写<a class="anchor ms-1" href="#getitem-方法的重写"></a></h5>
<p>除了对象 self 以外，<code>__getitem__</code> 方法接受一个额外的变量 <code>idx</code>，表示数据集中一个数据的索引。<br>
我们需要重写该方法，根据传入的索引返回将要输入模型的特征和标签。</p>

<h5 id="len-方法的重写" data-numberify>len 方法的重写<a class="anchor ms-1" href="#len-方法的重写"></a></h5>
<p>重写该方法以定义数据集的长度，例如上文示例用图片数量定义数据集长度</p>

<h4 id="使用已有数据集" data-numberify>使用已有数据集<a class="anchor ms-1" href="#使用已有数据集"></a></h4>
<p>这些提供的数据集使用方式很简单，只需要按照 PyTorch 文档中的使用方法填写参数，只需一行代码即可。<br>
例如 CIFAR10 的使用方法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">test_set</span> <span class="o">=</span> <span class="n">torchvision</span><span class="o">.</span><span class="n">datasets</span><span class="o">.</span><span class="n">CIFAR10</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">				<span class="s2">&#34;./dataset&#34;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">				<span class="n">train</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">                <span class="n">transform</span><span class="o">=</span><span class="n">torchvision</span><span class="o">.</span><span class="n">transforms</span><span class="o">.</span><span class="n">ToTensor</span><span class="p">(),</span> 
</span></span><span class="line"><span class="cl">                <span class="n">download</span><span class="o">=</span><span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div>
<h3 id="数据的处理" data-numberify>数据的处理<a class="anchor ms-1" href="#数据的处理"></a></h3>

<h4 id="处理图片" data-numberify>处理图片<a class="anchor ms-1" href="#处理图片"></a></h4>
<p>PyTorch 在 <code>torchvision.transforms</code> 中提供了许多处理图片的工具，例如常用的工具类 <code>torchvision.transforms.ToTensor()</code> 用于将 PIL 或 ndarray (使用 opencv) 格式的图片转换为 PyTorch 的 Tensor 类型，以便输入模型。<br>
除此之外，transform 模块还提供了常见的图片处理工具，例如图片反转、切割等等。</p>

<h3 id="dataloader-类的使用" data-numberify>DataLoader 类的使用<a class="anchor ms-1" href="#dataloader-类的使用"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl"><span class="n">test_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">dataset</span><span class="o">=</span><span class="n">test_set</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">						 <span class="n">num_workers</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">drop_last</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span></code></pre></div><p>遍历数据集的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">test_loader</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">    <span class="n">imgs</span><span class="p">,</span> <span class="n">targets</span> <span class="o">=</span> <span class="n">data</span>  
</span></span></code></pre></div>
<h2 id="搭建模型" data-numberify>搭建模型<a class="anchor ms-1" href="#搭建模型"></a></h2>
<p>搭建模型有两种方式，分别是：</p>
<ul>
<li>从零搭建</li>
<li>从已有的模型搭建</li>
</ul>

<h3 id="从零搭建模型" data-numberify>从零搭建模型<a class="anchor ms-1" href="#从零搭建模型"></a></h3>
<p>首先，定义一个继承 <code>nn.module</code> 的模型类，然后重写方法即可，示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Model</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">(</span><span class="n">Model</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">LeakyReLU</span><span class="p">(),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">LeakyReLU</span><span class="p">(),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">LeakyReLU</span><span class="p">(),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Flatten</span><span class="p">(),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">64</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">256</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>  
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl">        <span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">model</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">x</span>
</span></span></code></pre></div>
<h3 id="从已有的模型搭建模型" data-numberify>从已有的模型搭建模型<a class="anchor ms-1" href="#从已有的模型搭建模型"></a></h3>

<h4 id="导入已有模型" data-numberify>导入已有模型<a class="anchor ms-1" href="#导入已有模型"></a></h4>
<p>获取已有的模型有两种方式，第一种方式是使用 PyTorch 提供的知名模型，例如 vgg16。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">vgg16_pt</span> <span class="o">=</span> <span class="n">torchvision</span><span class="o">.</span><span class="n">models</span><span class="o">.</span><span class="n">vgg16</span><span class="p">(</span><span class="n">pretrained</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><p>参数 pretrained 为 True 时会下载预训练后的模型参数，反之则使用未训练的随机模型参数</p>

<h4 id="修改已有模型" data-numberify>修改已有模型<a class="anchor ms-1" href="#修改已有模型"></a></h4>
<p>有时候，下载的模型无法满足我们的任务需求，例如处理分类问题时，模型的输出层的神经元个数与我们需要区分的类别数量不同。这个时候，我们就需要修改模型。</p>
<p>修改模型所用到的函数或方法主要有以下几个：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 1. 增加：add_module 方法，可以增加单层也可以增加 Sequential</span>
</span></span><span class="line"><span class="cl"><span class="n">vgg16</span><span class="o">.</span><span class="n">add_module</span><span class="p">(</span><span class="s2">&#34;mod&#34;</span><span class="p">,</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span><span class="n">OrderedDict</span><span class="p">([</span>  <span class="c1"># 可以不给每层取名</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="s2">&#34;linear&#34;</span><span class="p">,</span> <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">256</span><span class="p">)),</span>  
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="s2">&#34;relu&#34;</span><span class="p">,</span> <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">()),</span>  
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="s2">&#34;softmax&#34;</span><span class="p">,</span> <span class="n">nn</span><span class="o">.</span><span class="n">Softmax</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>  
</span></span><span class="line"><span class="cl"><span class="p">])))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vgg16</span><span class="o">.</span><span class="n">add_module</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 修改：直接使用 [idx] 和 `.`</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">vgg16</span><span class="p">)</span>  <span class="c1"># 先print查看模型结构</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vgg16</span><span class="o">.</span><span class="n">classifier</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">vgg16</span><span class="o">.</span><span class="n">classifier</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">									<span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">									<span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. 删除：使用 del 即可</span>
</span></span><span class="line"><span class="cl"><span class="k">del</span> <span class="n">vgg16</span><span class="o">.</span><span class="n">classifier</span>
</span></span></code></pre></div>
<h2 id="训练模型" data-numberify>训练模型<a class="anchor ms-1" href="#训练模型"></a></h2>
<p>下面提供一个训练示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># * 3. Create the model object and Setting hyperparameters  </span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="c1"># create model object  </span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">Model</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">():</span>  
</span></span><span class="line"><span class="cl">    <span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">cuda</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c1"># define the loss function  </span>
</span></span><span class="line"><span class="cl"><span class="n">loss_fn</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">CrossEntropyLoss</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">():</span>  
</span></span><span class="line"><span class="cl">    <span class="n">loss_fn</span> <span class="o">=</span> <span class="n">loss_fn</span><span class="o">.</span><span class="n">cuda</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c1"># define the optimizer  </span>
</span></span><span class="line"><span class="cl"><span class="n">learning_rate</span> <span class="o">=</span> <span class="mf">0.01</span>  
</span></span><span class="line"><span class="cl"><span class="n">optimizer</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">optim</span><span class="o">.</span><span class="n">SGD</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="n">learning_rate</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl"><span class="c1"># optimizer = torch.optim.Adam(model.parameters())  </span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="c1"># Setting  </span>
</span></span><span class="line"><span class="cl"><span class="n">total_train_step</span> <span class="o">=</span> <span class="mi">0</span>  
</span></span><span class="line"><span class="cl"><span class="n">total_test_step</span> <span class="o">=</span> <span class="mi">0</span>  
</span></span><span class="line"><span class="cl"><span class="n">epoch</span> <span class="o">=</span> <span class="mi">30</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="c1"># set tensorboard  </span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span> <span class="o">=</span> <span class="n">SummaryWriter</span><span class="p">(</span><span class="s2">&#34;./logs_model&#34;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># * 4. Training the model</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">epoch</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;------ Epoch </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2"> begin. ------&#34;</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">    <span class="c1"># train  </span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>  <span class="c1"># for some certain layer(such as dropout), See PyTorch.org.  </span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">train_dataloader</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">        <span class="n">imgs</span><span class="p">,</span> <span class="n">targets</span> <span class="o">=</span> <span class="n">data</span>  
</span></span><span class="line"><span class="cl">        <span class="c1"># move to gpu  </span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">():</span>  
</span></span><span class="line"><span class="cl">            <span class="n">imgs</span><span class="p">,</span> <span class="n">targets</span> <span class="o">=</span> <span class="n">imgs</span><span class="o">.</span><span class="n">cuda</span><span class="p">(),</span> <span class="n">targets</span><span class="o">.</span><span class="n">cuda</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">        <span class="n">output</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">imgs</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">        <span class="n">loss</span> <span class="o">=</span> <span class="n">loss_fn</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">targets</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">        <span class="c1"># optimize  </span>
</span></span><span class="line"><span class="cl">        <span class="n">optimizer</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">        <span class="n">loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">        <span class="n">optimizer</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">        <span class="n">total_train_step</span> <span class="o">=</span> <span class="n">total_train_step</span> <span class="o">+</span> <span class="mi">1</span>  
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">total_train_step</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Train step: </span><span class="si">{</span><span class="n">total_train_step</span><span class="si">}</span><span class="s2"> / Loss: </span><span class="si">{</span><span class="n">loss</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">            <span class="n">end_time</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;tic </span><span class="si">{</span><span class="n">end_time</span><span class="o">-</span><span class="n">start_time</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">            <span class="n">writer</span><span class="o">.</span><span class="n">add_scalar</span><span class="p">(</span><span class="s2">&#34;train_loss(step)&#34;</span><span class="p">,</span> <span class="n">loss</span><span class="p">,</span> <span class="n">total_train_step</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1"># test  </span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>  <span class="c1"># for some certain layer  </span>
</span></span><span class="line"><span class="cl">    <span class="n">total_test_loss</span> <span class="o">=</span> <span class="mi">0</span>  
</span></span><span class="line"><span class="cl">    <span class="n">total_accuracy</span> <span class="o">=</span> <span class="mi">0</span>  
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>  
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">test_dataloader</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">            <span class="n">imgs</span><span class="p">,</span> <span class="n">targets</span> <span class="o">=</span> <span class="n">data</span>  
</span></span><span class="line"><span class="cl">            <span class="c1"># move to gpu  </span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">():</span>  
</span></span><span class="line"><span class="cl">                <span class="n">imgs</span><span class="p">,</span> <span class="n">targets</span> <span class="o">=</span> <span class="n">imgs</span><span class="o">.</span><span class="n">cuda</span><span class="p">(),</span> <span class="n">targets</span><span class="o">.</span><span class="n">cuda</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">            <span class="n">output</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">imgs</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">            <span class="c1"># compute accuracy  </span>
</span></span><span class="line"><span class="cl">            <span class="n">accuracy</span> <span class="o">=</span> <span class="p">(</span><span class="n">output</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">targets</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">            <span class="n">total_accuracy</span> <span class="o">+=</span> <span class="n">accuracy</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">            <span class="n">loss</span> <span class="o">=</span> <span class="n">loss_fn</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">targets</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">            <span class="n">total_test_loss</span> <span class="o">+=</span> <span class="n">loss</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1"># Show and log test info  </span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">ColorText</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">Total loss in test set: </span><span class="si">{</span><span class="n">total_test_loss</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">))</span>  
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">        <span class="n">ColorText</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Total accuracy in test set: </span><span class="si">{</span><span class="n">total_accuracy</span> <span class="o">/</span> <span class="n">test_set_size</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="n">writer</span><span class="o">.</span><span class="n">add_scalar</span><span class="p">(</span><span class="s2">&#34;test_loss(epoch)&#34;</span><span class="p">,</span> <span class="n">total_test_loss</span><span class="p">,</span> <span class="n">total_test_step</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="n">writer</span><span class="o">.</span><span class="n">add_scalar</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;test_accuracy(epoch)&#34;</span><span class="p">,</span> <span class="n">total_accuracy</span> <span class="o">/</span> <span class="n">test_set_size</span><span class="p">,</span> <span class="n">total_test_step</span>  
</span></span><span class="line"><span class="cl">    <span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="n">total_test_step</span> <span class="o">+=</span> <span class="mi">1</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1"># Save Model  </span>
</span></span><span class="line"><span class="cl">    <span class="n">torch</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="sa">f</span><span class="s2">&#34;model_</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">.pt&#34;</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">ColorText</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;..::Model </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2"> Saved..&#34;</span><span class="p">))</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></div>
<h2 id="附录" data-numberify>附录<a class="anchor ms-1" href="#附录"></a></h2>

<h3 id="tensorboard-的使用" data-numberify>Tensorboard 的使用<a class="anchor ms-1" href="#tensorboard-的使用"></a></h3>
<p>示例：<br>
首先在脚本内记录数据到指定路径</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch.urils.tensorboard</span> <span class="kn">import</span> <span class="n">SummaryWriter</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># writer 对象</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span> <span class="o">=</span> <span class="n">SummaryWriter</span><span class="p">(</span><span class="s2">&#34;./logs&#34;</span><span class="p">)</span>  <span class="c1"># log_dir</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 记录数据</span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">add_scalar</span><span class="p">(</span><span class="s2">&#34;loss curve&#34;</span><span class="p">,</span> <span class="n">y_value</span><span class="p">,</span> <span class="n">x_value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># </span>
</span></span><span class="line"><span class="cl"><span class="n">writer</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></div><p>然后，命令行用 Tensorboard 打开日志路径</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">tensorboard</span> <span class="p">-</span><span class="n">-log_dir</span> <span class="p">./</span><span class="n">logs</span>
</span></span></code></pre></div>]]></content:encoded></item></channel></rss>